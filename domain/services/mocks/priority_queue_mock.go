// Code generated by MockGen. DO NOT EDIT.
// Source: priority_queue.go
//
// Generated by this command:
//
//	mockgen -source=priority_queue.go -destination mocks/priority_queue_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/danbrato999/yuno-gveloz/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPriorityQueue is a mock of PriorityQueue interface.
type MockPriorityQueue struct {
	ctrl     *gomock.Controller
	recorder *MockPriorityQueueMockRecorder
	isgomock struct{}
}

// MockPriorityQueueMockRecorder is the mock recorder for MockPriorityQueue.
type MockPriorityQueueMockRecorder struct {
	mock *MockPriorityQueue
}

// NewMockPriorityQueue creates a new mock instance.
func NewMockPriorityQueue(ctrl *gomock.Controller) *MockPriorityQueue {
	mock := &MockPriorityQueue{ctrl: ctrl}
	mock.recorder = &MockPriorityQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriorityQueue) EXPECT() *MockPriorityQueueMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPriorityQueue) Add(order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPriorityQueueMockRecorder) Add(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPriorityQueue)(nil).Add), order)
}

// Remove mocks base method.
func (m *MockPriorityQueue) Remove(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPriorityQueueMockRecorder) Remove(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPriorityQueue)(nil).Remove), id)
}

// ShuffleAfter mocks base method.
func (m *MockPriorityQueue) ShuffleAfter(id, targetID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShuffleAfter", id, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShuffleAfter indicates an expected call of ShuffleAfter.
func (mr *MockPriorityQueueMockRecorder) ShuffleAfter(id, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShuffleAfter", reflect.TypeOf((*MockPriorityQueue)(nil).ShuffleAfter), id, targetID)
}
